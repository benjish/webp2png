self.Webp2Png=(()=>{let r=4,e=(()=>{const r=document.currentScript.src;return r.substring(0,r.lastIndexOf("/")+1)+"webp2png-worker.js"})(),t=3e3;const o=e=>{r=e||(navigator.hardwareConcurrency||4)};o();const n={};let s=0;const c=[],a=(()=>{const r=function*(){let r=1;for(;;)yield r++}();return()=>r.next().value})(),u=(()=>{const r={};return{add:e=>{const t=a();return r["ID"+t]=e,t},getRm:e=>{const t="ID"+e;if(!(t in r))return null;const o=r[t];return delete r[t],o},remove:e=>{const t="ID"+e;t in r&&delete r[t]},clear:()=>{for(const e in r)delete r[e]}}})(),i=()=>{for(const r in n){const e=n[r];if(1===e.getState())return e}return(()=>{if(s>=r)return null;const o="ID"+a();let i,l,f;const d=new Worker(e),m=()=>{s--,d.terminate(),o in n&&delete n[o]},w=r=>{i=r,l=performance.now(),1===r?f=setTimeout(m,t):clearTimeout(f)};w(1);const E=()=>{const r=c.shift();return!!r&&(w(2),d.postMessage(r),!0)},g={id:o,worker:d,getState:()=>i,terminate:m,sendConvert:E};return d.onmessage=r=>{const e=r.data;switch(e.cmd){case"convert":{const r=u.getRm(e.id);r?e.error?r.rej(e.error):r.res(e.data):console.warn("CALLBACK RESPONSE LOST"),E()||w(1);break}case"worker-error":case"worker-message-error":console.warn(e.cmd),console.warn(e.error)}},d.onerror=r=>{console.error("[WEBP2PNG WORKER ERROR]"),console.error(r),m()},d.onmessageerror=r=>{console.error("[WEBP2PNG WORKER MESSAGE ERROR]"),console.error(r),m()},s++,n["ID"+o]=g,g})()},l=(r,e)=>new Promise((t,o)=>{const n=u.add({res:t,rej:o});try{r=(r=>{if(!r)throw new Error("webp2png EMPTY DATA");if("ArrayBuffer"===r.constructor.name||r.buffer||"function"==typeof r.arrayBuffer)return r;throw new Error("webp2png UNEXPECTED DATA FORMAT")})(r),c.push({cmd:"convert",id:n,data:r,format:e});const t=i();t&&t.sendConvert()}catch(r){u.remove(n),o(r)}});return{setMaxThread:r=>o(r),setWorkerUrl:r=>e=r,setWorkerTimeout:r=>t=r,destroy:()=>(()=>{for(const r in n)n[r].terminate()})(),version:()=>"1.0.0",toBlob:r=>l(r,"blob"),toArrayBuffer:r=>l(r,"buffer"),toBase64Url:r=>l(r,"url64")}})();
